import os
import numpy as np
import matplotlib.pyplot as plt

# Scatter plot to compare Q times
def make_scatter_plot(xarr_1,xarr_2,yarr_1_lst,yarr_2_lst,log=False,xaxis_name="x",yaxis_name="y",tag1="set1",tag2="set2",save_name="test",nevents=None):

    #fig, axs = plt.subplots(nrows=1, ncols=1)

    # Create the figure
    fig, (ax1, ax2, ax3) = plt.subplots(
        nrows=3,
        ncols=1,
        figsize=(7,7),
        gridspec_kw={"height_ratios": (1, 1, 1)},
        sharex=True
    )
    fig.subplots_adjust(hspace=.09)

    # Loop over the sets of events and plot them
    if len(yarr_1_lst) != len(yarr_2_lst): raise Exception("Number of sets of points to plot do not agree between cpu and gpu")
    for i in range(len(yarr_1_lst)):
        print(f"Plotting for set {i}...")
        # Plot the data on main plot
        if i==0:
            ax1.scatter(xarr_1,yarr_1_lst[i],color="orange",edgecolors='orange',facecolors="none",label=tag1,zorder=100)
            ax1.scatter(xarr_2,yarr_2_lst[i],color="blue",edgecolors='blue',facecolors="none",label=tag2,zorder=100)
        else:
            ax1.scatter(xarr_1,yarr_1_lst[i],color="orange",edgecolors='orange',facecolors="none",zorder=100)
            ax1.scatter(xarr_2,yarr_2_lst[i],color="blue",edgecolors='blue',facecolors="none",zorder=100)

        # Plot events/s in kHz
        ax2.scatter(xarr_1,nevents/(1000*yarr_1_lst[i]),color="orange",edgecolors='orange',facecolors="none",zorder=100)
        ax2.scatter(xarr_2,nevents/(1000*yarr_2_lst[i]),color="blue",edgecolors='blue',facecolors="none",zorder=100)

        # Plot the ratio on the ratio plot
        min_len_x = min(len(xarr_1),len(xarr_2))
        r_arr = yarr_1_lst[i][:min_len_x]/yarr_2_lst[i][:min_len_x]
        ax3.scatter(xarr_1[:min_len_x],r_arr,color="orange",edgecolors='orange',facecolors="none",zorder=100)

    # Set log scale
    if log:
        ax1.set_yscale('log')
        ax2.set_yscale('log')
        save_name = save_name+"_log"

    # Set titles and such
    ax1.set_ylabel(yaxis_name)
    ax2.set_ylabel(f"Events/s [kHz]")
    ax1.legend(fontsize="12",framealpha=1)
    ax1.set_title(save_name)
    ax1.grid(zorder=-99)
    ax2.grid(zorder=-99)
    ax3.grid(zorder=-99)
    ax3.axhline(1.0,linestyle="-",color="k",linewidth=1)
    ax3.set_ylabel(f"{tag1}/{tag2}")
    ax3.set_xlabel(xaxis_name)

    #ax1.set_ylim(0.1,10e4)
    #ax2.set_ylim(1,10e5)
    #ax3.set_ylim(-100,1050)

    #ax3.yaxis.set_major_locator(5)
    #plt.yticks(5)
    plt.locator_params(axis="y", nbins=5) 


    plt.savefig(os.path.join(f"plots/{save_name}.png"),format="png")
    plt.savefig(os.path.join(f"plots/{save_name}.pdf"),format="pdf")
    #plt.show()
    return plt



def main():


    # Dict to keep track of the order of the dt time values printed in the timing array
    # The structure of the np array is like:
    # np.array([
    #    [read,load,fill,total times for query 1],
    #    [read,load,fill,total times for query 2], 
    #    ...
    # ]
    time_lables_dict = {
        0 : "read",
        1 : "load",
        2 : "fill",
        3 : "total",
    }

    # Queries (for x axis)
    x_gpu = [1,2,3,4,5]
    x_cpu = [1,2,3,4,5,6,7,8]

    # Timing numbers
    timing_dict = {

        # Run 100k, about 3m
        "100k" : {
            "nevents" : 100000,
            "y_gpu_arr" : np.array([
            ]),
            "y_cpu_arr" : np.array([
            ]),
        },

        "1M" : {
            "nevents" : 1e6,
            "y_gpu_arr" : np.array([
            ]),
            "y_cpu_arr" : np.array([
            ]),
        },

        # Takes about 40m to run
        "10M" : {
            "nevents" : 1e6,
            "y_gpu_arr" : np.array([
                # Not first run in the session (had run on smaller sample first), sync time for GPU
                #[[2.2988128662109375, 0.0017576217651367188, 0.07892251014709473, 2.379492998123169], [1.0368926525115967, 0.002088785171508789, 0.0387423038482666, 1.077723741531372], [1.4661009311676025, 0.0024144649505615234, 3.136800527572632, 4.605315923690796], [0.07074904441833496, 0.0010755062103271484, 0.031564950942993164, 0.10338950157165527], [1.1329405307769775, 0.006411314010620117, 0.7364180088043213, 1.875769853591919]],
                #[[1.4883410930633545, 0.007409334182739258, 0.08619856834411621, 1.58194899559021], [0.07553482055664062, 0.0017833709716796875, 0.03951668739318848, 0.11683487892150879], [0.09130549430847168, 0.002226591110229492, 3.142155408859253, 3.235687494277954], [0.07184386253356934, 0.0012729167938232422, 0.03176069259643555, 0.10487747192382812], [0.1197657585144043, 0.006050586700439453, 0.7376260757446289, 0.8634424209594727]],
                #[[4.100183486938477, 0.006932973861694336, 3.3858275413513184, 7.492944002151489], [0.43503546714782715, 0.0030269622802734375, 0.03940176963806152, 0.4774641990661621], [0.09679007530212402, 0.0023038387298583984, 5.147477865219116, 5.246571779251099], [0.07102298736572266, 0.0012974739074707031, 0.03227090835571289, 0.10459136962890625], [0.12444424629211426, 0.006011962890625, 0.7490983009338379, 0.8795545101165771]],
                #[[4.805429697036743, 0.012231111526489258, 5.717122554779053, 10.534783363342285], [1.2194154262542725, 0.0032091140747070312, 0.039399147033691406, 1.262023687362671], [1.436096429824829, 0.002382993698120117, 4.85906457901001, 6.297544002532959], [0.07397794723510742, 0.0012803077697753906, 0.03230643272399902, 0.10756468772888184], [0.9787981510162354, 0.006266117095947266, 0.7501811981201172, 1.7352454662322998]],
                #[[1.2517049312591553, 0.0017294883728027344, 0.07294797897338867, 1.3263823986053467], [0.9883022308349609, 0.001981496810913086, 0.038500070571899414, 1.0287837982177734], [1.54949951171875, 0.0023195743560791016, 2.7032470703125, 4.255066156387329], [0.07419347763061523, 0.0011811256408691406, 0.031455039978027344, 0.10682964324951172], [1.1516172885894775, 0.006209135055541992, 0.72762131690979, 1.8854477405548096]],
                # Not first run in the session (had run on smaller sample first), sync time for GPU, pyarrow for cpu
                [[1.5815753936767578, 0.00156402587890625, 0.07590317726135254, 1.6590425968170166], [0.07701683044433594, 0.0016074180603027344, 0.038376569747924805, 0.11700081825256348], [0.09454607963562012, 0.0021135807037353516, 3.0548038482666016, 3.151463508605957], [0.07436060905456543, 0.001234292984008789, 0.03155684471130371, 0.10715174674987793], [0.13285064697265625, 0.005905628204345703, 1.1622741222381592, 1.3010303974151611]],
                [[1.6861388683319092, 0.0018656253814697266, 0.07868528366088867, 1.7666897773742676], [0.07832741737365723, 0.0018076896667480469, 0.03959178924560547, 0.11972689628601074], [0.09486174583435059, 0.0021278858184814453, 3.0948309898376465, 3.1918206214904785], [0.07574081420898438, 0.001272439956665039, 0.0317685604095459, 0.10878181457519531], [0.12839722633361816, 0.005967378616333008, 1.1795237064361572, 1.3138883113861084]],
                [[2.076409101486206, 0.00516200065612793, 4.802795648574829, 6.884366750717163], [0.5489840507507324, 0.002950906753540039, 0.0398101806640625, 0.591745138168335], [0.09500670433044434, 0.0021047592163085938, 5.1707375049591064, 5.267848968505859], [0.07592463493347168, 0.0012633800506591797, 0.0326848030090332, 0.10987281799316406], [0.6212971210479736, 0.005972623825073242, 0.7522389888763428, 1.3795087337493896]],
            ]),
            "y_cpu_arr" : np.array([
                # Not first run in the session (had run on smaller sample first), sync time for GPU
                #[[0.05462360382080078, 0.4290308952331543, 0.01772594451904297, 0.501380443572998], [1.6045279502868652, 85.0115897655487, 0.07485175132751465, 86.69096946716309], [3.1483514308929443, 170.96749830245972, 0.49271178245544434, 174.6085615158081], [1.654726266860962, 83.19184994697571, 0.1502375602722168, 84.99681377410889], [6.693244457244873, 219.02542686462402, 1.1616668701171875, 226.88033819198608], [8.004743337631226, 421.4755365848541, 83.60413575172424, 513.0844156742096], [19.105891704559326, 648.4262492656708, 6.439871072769165, 673.9720120429993], [12.920780181884766, 301.50643610954285, 5.7785961627960205, 320.20581245422363]],
                #[[0.06475448608398438, 0.4346036911010742, 0.017474889755249023, 0.5168330669403076], [1.6161415576934814, 85.98989987373352, 0.0751199722290039, 87.681161403656], [3.209472417831421, 174.17770624160767, 0.48957395553588867, 177.87675261497498], [1.6591274738311768, 88.29861116409302, 0.15465140342712402, 90.11239004135132], [6.737521171569824, 223.10285449028015, 1.2088258266448975, 231.04920148849487], [7.615210771560669, 428.7750642299652, 83.27980518341064, 519.6700801849365], [18.651918649673462, 653.093729019165, 6.644707202911377, 678.3903548717499], [13.565923929214478, 304.0172641277313, 5.956785202026367, 323.53997325897217]],
                #[[0.05633831024169922, 0.4131450653076172, 0.016805410385131836, 0.48628878593444824], [1.5743885040283203, 85.57322978973389, 0.07525634765625, 87.22287464141846], [3.2490341663360596, 171.3036549091339, 0.4959878921508789, 175.04867696762085], [1.6760907173156738, 84.4787917137146, 0.15267395973205566, 86.30755639076233], [6.555889844894409, 203.2537190914154, 1.186833381652832, 210.99644231796265], [7.918399810791016, 431.9996485710144, 83.49986267089844, 523.4179110527039], [18.816008806228638, 647.2263283729553, 6.468270778656006, 672.51060795784], [13.104086875915527, 305.8156929016113, 5.891950845718384, 324.81173062324524]],
                #[[0.05843353271484375, 0.43542933464050293, 0.22959113121032715, 0.7234539985656738], [1.61482834815979, 83.52780628204346, 0.0746614933013916, 85.21729612350464], [3.2017087936401367, 175.87470769882202, 0.5500161647796631, 179.62643265724182], [1.4867169857025146, 89.45161294937134, 0.150634765625, 91.08896470069885], [6.67623233795166, 224.8102684020996, 1.2707092761993408, 232.7572100162506], [8.280472993850708, 435.87942457199097, 83.21505331993103, 527.3749508857727], [18.99006962776184, 659.4592454433441, 6.41716194152832, 684.8664770126343], [12.910863399505615, 306.9538764953613, 5.894808769226074, 325.759548664093]],
                #[[0.05730032920837402, 0.3642117977142334, 0.014940977096557617, 0.43645310401916504], [1.4118545055389404, 73.83841562271118, 0.06540942192077637, 75.3156795501709], [2.7923691272735596, 151.76906943321228, 0.47728848457336426, 155.0387270450592], [1.4172778129577637, 76.0696496963501, 0.13954401016235352, 77.62647151947021], [5.972468852996826, 198.3233127593994, 1.163170337677002, 205.45895195007324], [7.9451868534088135, 406.49010968208313, 82.22607851028442, 496.66137504577637], [18.114018201828003, 580.6386804580688, 6.165811538696289, 604.9185101985931], [15.373046398162842, 269.6303858757019, 5.4720611572265625, 290.4754934310913]],
                # Not first run in the session (had run on smaller sample first), sync time for GPU, pyarrow for cpu
                [[0.04200387001037598, 0.09935307502746582, 0.056989431381225586, 0.19834637641906738], [0.3683950901031494, 4.350168228149414, 0.19568085670471191, 4.914244174957275], [0.6780776977539062, 8.776479244232178, 1.2706658840179443, 10.725222826004028], [0.3434610366821289, 4.401387453079224, 0.39362525939941406, 5.138473749160767], [0.6263217926025391, 8.871382713317871, 1.6156229972839355, 11.113327503204346], [1.7731642723083496, 21.914700508117676, 72.51578760147095, 96.20365238189697], [2.593351364135742, 27.898444890975952, 9.290273666381836, 39.78206992149353], [1.289369821548462, 10.471790552139282, 6.647113084793091, 18.408273458480835]],
                [[0.041960954666137695, 0.09601473808288574, 0.056436777114868164, 0.1944124698638916], [0.3701472282409668, 4.3522789478302, 0.19462251663208008, 4.917048692703247], [0.6835751533508301, 8.78408932685852, 1.258218765258789, 10.72588324546814], [0.3445723056793213, 4.429948806762695, 0.39241695404052734, 5.166938066482544], [0.6315445899963379, 8.815284013748169, 1.615509033203125, 11.062337636947632], [1.740649700164795, 22.061144590377808, 72.15735483169556, 95.95914912223816], [2.342261552810669, 27.87834119796753, 9.386913537979126, 39.607516288757324], [1.0867652893066406, 10.180213451385498, 6.834189176559448, 18.101167917251587]],
                [[0.07789087295532227, 0.09351325035095215, 0.057554006576538086, 0.2289581298828125], [0.3616511821746826, 4.343311071395874, 0.18419861793518066, 4.889160871505737], [0.6643061637878418, 8.726859331130981, 1.2653675079345703, 10.656533002853394], [0.3326690196990967, 4.400164842605591, 0.3871748447418213, 5.120008707046509], [0.6314654350280762, 8.807303428649902, 1.657123327255249, 11.095892190933228], [1.7669188976287842, 21.67437195777893, 72.2206289768219, 95.66191983222961], [2.3154752254486084, 27.49279236793518, 9.342978954315186, 39.151246547698975], [1.078124761581421, 10.38680124282837, 6.869341135025024, 18.334267139434814]],
            ]),
        },

        # Never run to full completion on CPU, many hours
        "53M" : {
            "nevents" : 53446198,
            "y_gpu_arr" : np.array([
            ]),
            "y_cpu_arr" : np.array([
            ]),
        },
    }

    # Make the plots
    cat_to_plot = "10M"
    for dt_category_idx,dt_category_label in time_lables_dict.items():
        nevts = timing_dict[cat_to_plot]["nevents"]
        y_gpu = timing_dict[cat_to_plot]["y_gpu_arr"][:,:,dt_category_idx]
        y_cpu = timing_dict[cat_to_plot]["y_cpu_arr"][:,:,dt_category_idx]
        make_scatter_plot(x_cpu,x_gpu,y_cpu,y_gpu,xaxis_name=f"Benchmark Queries ({dt_category_label})",yaxis_name="Runtime [s]", tag1="CPU", tag2="GPU",save_name=f"adl_benchmarks_nEvents{cat_to_plot}_{dt_category_label}",log=False,nevents=nevts)
        make_scatter_plot(x_cpu,x_gpu,y_cpu,y_gpu,xaxis_name=f"Benchmark Queries ({dt_category_label})",yaxis_name="Runtime [s]", tag1="CPU", tag2="GPU",save_name=f"adl_benchmarks_nEvents{cat_to_plot}_{dt_category_label}",log=True,nevents=nevts)


main()




